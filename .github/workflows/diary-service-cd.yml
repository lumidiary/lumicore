name: Diary_Service_CD

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/diary-service
  K8S_DEPLOYMENT: diary-service
  K8S_NAMESPACE: default

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) GitHub 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) JDK 17 설치
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # 3) Spring Boot 빌드
      - name: Build with Maven
        run: mvn clean compile package -DskipTests

      # 4) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5) Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6) Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $IMAGE_NAME:$COMMIT_HASH \
            -t $IMAGE_NAME:latest \
            --push \
            .

      # 7) Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.32.1'

      # 8) Setup OCI CLI and kubeconfig
      - name: Setup OCI CLI and kubeconfig
        shell: bash
        run: |
          pip3 install --upgrade oci-cli
          mkdir -p ~/.oci
          
          # ── 여기에서 키 파일명을 oci_api_key.pem 으로 맞춤 ──
          echo "${{ secrets.OCI_CONFIG_CONTENT }}" > ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem
          
          mkdir -p ~/.kube
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OCI_CLUSTER_OCID }} \
            --file ~/.kube/config \
            --region ${{ secrets.OCI_REGION }} \
            --token-version 2.0.0

          export KUBECONFIG=~/.kube/config
          kubectl config current-context  # 올바로 생성됐는지 확인

      # 9) Create or update Kubernetes Secret (검증 단계 생략)
      - name: Create or update Kubernetes Secret
        run: |
          kubectl create secret generic diary-app-secret \
            --from-literal=DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=OCI_TENANCY=${{ secrets.OCI_TENANCY }} \
            --from-literal=OCI_USER=${{ secrets.OCI_USER }} \
            --from-literal=OCI_STREAM_POOL_OCID=${{ secrets.OCI_STREAM_POOL_OCID }} \
            --from-literal=OCI_STREAM_BROKERS=${{ secrets.OCI_STREAM_BROKERS }} \
            --from-literal=OCI_STREAM_AUTH_TOKEN="${{ secrets.OCI_STREAM_AUTH_TOKEN }}" \
            --namespace=$K8S_NAMESPACE \
            --dry-run=client -o yaml \
            | kubectl apply -f - --validate=false

      # 10) Create Docker Hub Secret
      - name: Create Docker Hub Secret
        run: |
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
            --namespace=$K8S_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      # 11) Update deployment image
      - name: Update deployment image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          sed -i "s|image: DOCKER_IMAGE_PLACEHOLDER|image: $IMAGE_NAME:$COMMIT_HASH|g" k8s/diaryservice-deployment-secret.yaml

      # 12) Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/diaryservice-deployment-secret.yaml -n $K8S_NAMESPACE

      # 13) 배포 재시작 및 상태 확인
      - name: Rollout and Verify Deployment
        run: |
          kubectl rollout restart deployment/$K8S_DEPLOYMENT --namespace $K8S_NAMESPACE
          kubectl rollout status deployment/$K8S_DEPLOYMENT --namespace $K8S_NAMESPACE --timeout=300s

          echo "=== Deployment Status ==="
          kubectl get deployment $K8S_DEPLOYMENT -o wide --namespace $K8S_NAMESPACE

          echo "=== Pod Status ==="
          kubectl get pods -l app=$K8S_DEPLOYMENT --namespace $K8S_NAMESPACE

          echo "=== Service Status ==="
          kubectl get service $K8S_DEPLOYMENT --namespace $K8S_NAMESPACE

      # 14) 보안 정리
      - name: Cleanup Temporary Files
        if: always()
        run: |
          rm -rf ~/.oci ~/.kube
