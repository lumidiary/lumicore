# .github/workflows/diary_service_cd.yml

name: Diary_Service_CD

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/diary-service
  K8S_DEPLOYMENT: diary-service
  K8S_NAMESPACE: default

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) GitHub 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) JDK 17 설치
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # 3) Spring Boot 빌드
      - name: Build with Maven
        run: mvn clean compile package -DskipTests

      # 4) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5) 디버그: IMAGE_NAME 변수 확인
      - name: Debug: print IMAGE_NAME
        run: echo "IMAGE_NAME=${IMAGE_NAME}"

      # 6) Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          # 정확히 :latest 태그를 붙여서 빌드
          docker build -t $IMAGE_NAME:latest .
          # 푸시할 때도 :latest 명시
          docker push $IMAGE_NAME:latest

      # 7) kubeconfig 설정
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      # 8) Kubernetes Secret 생성 또는 갱신
      - name: Create or update Kubernetes Secret
        run: |
          kubectl create secret generic diary-app-secret \
            --from-literal=DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=OCI_TENANCY=${{ secrets.OCI_TENANCY }} \
            --from-literal=OCI_USER=${{ secrets.OCI_USER }} \
            --from-literal=OCI_STREAM_POOL_OCID=${{ secrets.OCI_STREAM_POOL_OCID }} \
            --from-literal=OCI_STREAM_BROKERS=${{ secrets.OCI_STREAM_BROKERS }} \
            --from-literal=OCI_STREAM_AUTH_TOKEN="${{ secrets.OCI_STREAM_AUTH_TOKEN }}" \
            --namespace=$K8S_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      # 9) Deployment 적용
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/diaryservice-deployment-secret.yaml -n $K8S_NAMESPACE

      # 10) 배포 재시작 및 상태 확인
      - name: Rollout and Verify Deployment
        run: |
          kubectl rollout restart deployment/$K8S_DEPLOYMENT --namespace $K8S_NAMESPACE
          kubectl rollout status deployment/$K8S_DEPLOYMENT --namespace $K8S_NAMESPACE --timeout=300s

          echo "=== Deployment Status ==="
          kubectl get deployment $K8S_DEPLOYMENT -o wide --namespace $K8S_NAMESPACE

          echo "=== Pod Status ==="
          kubectl get pods -l app=$K8S_DEPLOYMENT --namespace $K8S_NAMESPACE

          echo "=== Service Status ==="
          kubectl get service $K8S_DEPLOYMENT --namespace $K8S_NAMESPACE

      # 11) 보안 정리
      - name: Cleanup Temporary Files
        if: always()
        run: |
          rm -rf ~/.oci ~/.kube
