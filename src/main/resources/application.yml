# src/main/resources/application.yml
spring:
    config:
        import:
            - optional:classpath:application-secret.yml  # 시크릿 분리 파일
    application:
        name: lumicore

    datasource:
        url: "jdbc:mysql://10.0.10.210:3306/lumidiary
          ?serverTimezone=Asia/Seoul
          &characterEncoding=utf8
          &useSSL=false
          &allowPublicKeyRetrieval=true
          &createDatabaseIfNotExist=true" #"jdbc:mysql://10.0.10.210:3306/lumidiary
        username: ${spring.datasource.username}       # 플레이스홀더
        password: ${spring.datasource.password}       # 플레이스홀더
        driver-class-name: com.mysql.cj.jdbc.Driver
    jpa:
        hibernate:
            ddl-auto: update
        show-sql: true
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL8Dialect
                format_sql: true

    batch:
        jdbc:
            initialize-schema: always
            isolation-level-for-create: default
            platform: mysql
            schema: classpath:org/springframework/batch/core/schema-mysql.sql
        job:
            enabled: false  # 시작시 Job 자동실행 비활성화
            name: ${job.name:NONE}

    kafka:
        bootstrap-servers: "${OCI_STREAM_BROKERS}"
        properties:
            security.protocol: SASL_SSL
            sasl.mechanism: OCI
            sasl.jaas.config: |
                org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required
                username="${OCI_STREAM_POOL_OCID}"
                password="instance_principal";
        consumer:
            group-id: diary-callback-consumers
            auto-offset-reset: earliest
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        producer:
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: org.apache.kafka.common.serialization.StringSerializer
        topic:
            ai-callback: "ai-callback"  # AI 서비스 콜백 토픽

app:
    client:
        url: "api.lumidiary.com"
    kafka:
        topic:
            ai-callback: "ai-callback"  # AI 서비스 콜백 토픽

server:
  port: 8082
  # WebSocket을 위한 추가 설정
  servlet:
    session:
      timeout: 3600s
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
  http2:
    enabled: true

oci:
    configFilePath: ${OCI_CONFIG_FILE:${user.home}/.oci/config}  # OCI 설정 파일 경로

    objectstorage:
        namespace: ax5ipvulwvc1             # OCI Object Storage namespace
        bucket: bucket-20250507-1731        # OCI Object Storage bucket 이름
        uri-prefix: https://ax5ipvulwvc1.objectstorage.ap-chuncheon-1.oci.customer-oci.com
    queue:
        id: ocid1.queue.oc1.ap-chuncheon-1.amaaaaaabtgrhfyaiwmflsupo2zjy2xlyqdvbvsh2i54jdqctcfaumybytaq
        channels:
            default: diary    # 기존 메시지용 채널 ID
            digest: digest    # Digest 전용 채널 ID






logging:
    level:
        # WebSocket 상세 로깅
        org.springframework.web.socket: DEBUG
        org.springframework.web.socket.sockjs: DEBUG
        org.springframework.web.socket.stomp: DEBUG
        org.springframework.messaging.simp: DEBUG
        
        # HTTP 요청/응답 추적
        org.springframework.web.servlet.DispatcherServlet: DEBUG
        org.springframework.web.cors: DEBUG
        
        # SQL 실행 추적
        org.hibernate.SQL: DEBUG
        org.hibernate.type.descriptor.sql.BasicBinder: TRACE



