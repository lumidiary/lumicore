package com.example.lumicore.service;

import com.example.lumicore.dto.analysis.AnalysisCompleteResponseDto;
import com.example.lumicore.dto.analysis.AnalysisResultDto;
import com.example.lumicore.dto.analysis.ImageAnalysisDto;
import com.example.lumicore.dto.analysis.LandmarkDto;
import com.example.lumicore.dto.question.QuestionItemDto;
import com.example.lumicore.dto.question.QuestionListResponseDto;
import com.example.lumicore.jpa.entity.*;
import com.example.lumicore.jpa.repository.*;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class AnalysisServiceImpl implements AnalysisService {

    private final DiaryRepository diaryRepo;
    private final DiaryPhotoRepository photoRepo;
    private final LandmarkRepository landmarkRepo;
    private final DiaryQARepository qaRepo;
    private final AiCallbackProducerService callbackProducerService;

    // Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄÎ•º ÏúÑÌïú Ï≤òÎ¶¨ ÏôÑÎ£å ÏÉÅÌÉú Ï∂îÏ†Å
    private final ConcurrentHashMap<String, Boolean> processedCallbacks = new ConcurrentHashMap<>();

    private final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Override
    @Transactional
    public QuestionListResponseDto processAnalysis(AnalysisResultDto dto) {
        UUID diaryId = null;

        List<QuestionItemDto> results = new ArrayList<>();
        
        // DTO Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if (dto == null) {
            throw new IllegalArgumentException("AnalysisResultDtoÍ∞Ä nullÏûÖÎãàÎã§.");
        }
        
        if (dto.getImages() == null || dto.getImages().isEmpty()) {
            throw new IllegalArgumentException("Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. images Î¶¨Ïä§Ìä∏Í∞Ä nullÏù¥Í±∞ÎÇò ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.");
        }
        
        log.info("üìä Î∂ÑÏÑù Ï≤òÎ¶¨ ÏãúÏûë: Ïù¥ÎØ∏ÏßÄ {}Í∞ú, ÏßàÎ¨∏ {}Í∞ú", 
            dto.getImages().size(), 
            dto.getQuestions() != null ? dto.getQuestions().size() : 0);
        
        // 1) Ïù¥ÎØ∏ÏßÄÎ≥Ñ Ï≤òÎ¶¨
        for (ImageAnalysisDto img : dto.getImages()) {
            String imageId = img.getImageId();
            if (imageId == null || imageId.trim().isEmpty()) {
                log.warn("‚ö†Ô∏è imageIdÍ∞Ä nullÏù¥Í±∞ÎÇò ÎπÑÏñ¥ÏûàÏäµÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§: {}", img);
                continue;
            }
            
            UUID photoId;
            try {
                photoId = UUID.fromString(imageId);
            } catch (IllegalArgumentException e) {
                log.warn("‚ö†Ô∏è ÏûòÎ™ªÎêú imageId ÌòïÏãùÏûÖÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§: {}", imageId);
                continue;
            }
            
            DiaryPhoto photo = photoRepo.findById(photoId)
                    .orElseThrow(() -> new IllegalArgumentException("Invalid imageId: " + imageId));

            // ÏÑ§Î™Ö¬∑Ï¥¨ÏòÅÏãúÍ∞Ñ Í∞±Ïã†
            photo.updateDescription(img.getDescription());
            photo.updateCapturedAt(LocalDateTime.parse(img.getMetadata().getCaptureDate(), dtf));

            // **ÏúÑÎèÑ¬∑Í≤ΩÎèÑ Í∞±Ïã†** (MetadataDtoÏóê latitude/longitude ÌïÑÎìúÍ∞Ä ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§)
            photo.updateLocation(
                    img.getMetadata().getLocation().getLatitude(),
                    img.getMetadata().getLocation().getLongitude()
            );

            // ÎûúÎìúÎßàÌÅ¨ Îß§Ìïë
            for (LandmarkDto lmDto : img.getMetadata().getNearbyLandmarks()) {
                Landmark landmark = landmarkRepo.findById(lmDto.getId())
                        .orElseGet(() -> landmarkRepo.save(
                                Landmark.builder()
                                        .id(lmDto.getId())
                                        .name(lmDto.getName())
                                        .build()
                        ));
                photo.addLandmark(landmark);
            }

            photoRepo.save(photo);

            // diaryId Í≤∞Ï†ï
            if (diaryId == null) {
                diaryId = photo.getDiary().getId();
            }
        }

        if (diaryId == null) {
            throw new IllegalArgumentException("Ï≤òÎ¶¨ Í∞ÄÎä•Ìïú Ïú†Ìö®Ìïú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§. Î™®Îì† Ïù¥ÎØ∏ÏßÄÏùò imageIdÍ∞Ä nullÏù¥Í±∞ÎÇò ÏûòÎ™ªÎêú ÌòïÏãùÏûÖÎãàÎã§.");
        }

        UUID finalDiaryId = diaryId;
        Diary diary = diaryRepo.findById(diaryId)
                .orElseThrow(() -> new EntityNotFoundException("Diary not found: " + finalDiaryId));
        diary.updateOverallDaySummary(dto.getOverallDaySummary());
        diaryRepo.save(diary);

        // 2) ÏßàÎ¨∏Î≥Ñ DiaryQA Ï†ÄÏû•
        if (dto.getQuestions() != null) {
            for (String question : dto.getQuestions()) {
                if (question != null && !question.trim().isEmpty()) {
                    DiaryQA qa = DiaryQA.builder()
                            .diary(Diary.builder().id(diaryId).build())
                            .aiQuestion(question)
                            .userAnswer("")
                            .build();
                    qaRepo.save(qa);

                    results.add(new QuestionItemDto(qa.getId(), question));
                }
            }
        }

        log.info("‚úÖ Î∂ÑÏÑù Ï≤òÎ¶¨ ÏôÑÎ£å: diaryId={}, ÏßàÎ¨∏ {}Í∞ú Ï†ÄÏû•", diaryId, results.size());

        // 3) ÏùëÎãµ DTO Î∞òÌôò
        return new QuestionListResponseDto(diaryId, results);
    }

    @Override
    @Transactional
    public void handleAnalysisCallback(String diaryId, AnalysisResultDto dto) throws Exception {
        // Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ Ï≤¥ÌÅ¨
        if (processedCallbacks.putIfAbsent(diaryId, true) != null) {
            log.info("üö´ Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú Î∂ÑÏÑù ÏΩúÎ∞±: diaryId={}", diaryId);
            return;
        }

        try {
            log.info("üéØ Î∂ÑÏÑù ÏΩúÎ∞± Ï≤òÎ¶¨ ÏãúÏûë: diaryId={}", diaryId);
            
            // 1) Í∏∞Ï°¥ Î∂ÑÏÑù Ï≤òÎ¶¨ Î°úÏßÅ Ïã§Ìñâ (DB Ï†ÄÏû•)
            QuestionListResponseDto response = processAnalysis(dto);
            log.info("üìä ÏßàÎ¨∏ DB Ï†ÄÏû• ÏôÑÎ£å, Ï¥ù {}Í∞ú ÏßàÎ¨∏ ÏÉùÏÑ±", response.getQuestions().size());
            
            // 2) ÏÉàÎ°úÏö¥ ÌòïÏãùÏùò ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
            AnalysisCompleteResponseDto analysisComplete = AnalysisCompleteResponseDto.builder()
                    .overallDaySummary(dto.getOverallDaySummary())
                    .questions(response.getQuestions())
                    .build();
            
            // 3) ANALYSIS_COMPLETEÎ°ú Ìïú Î≤àÏóê Ï†ÑÏÜ° (Í∏∞Ï°¥Ïùò Î≥ÑÎèÑ ÏßàÎ¨∏ Ï†ÑÏÜ° Ï†úÍ±∞)
            log.info("üì§ KafkaÎ°ú Î∂ÑÏÑù ÏôÑÎ£å ÏΩúÎ∞± Ï†ÑÏÜ° (JSON Ìè¨Ìï®)");
            callbackProducerService.sendAnalysisCompleteCallback(diaryId, analysisComplete);
            
            log.info("‚úÖ Î∂ÑÏÑù ÏΩúÎ∞± Ï≤òÎ¶¨ ÏôÑÎ£å: diaryId={}", diaryId);
            
        } catch (Exception e) {
            // Ï≤òÎ¶¨ Ïã§Ìå® Ïãú ÏÉÅÌÉú Ï†úÍ±∞
            processedCallbacks.remove(diaryId);
            
            log.error("‚ùå Î∂ÑÏÑù ÏΩúÎ∞± Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: diaryId={}", diaryId, e);
            
            // ÏóêÎü¨ Î∞úÏÉù Ïãú ÏóêÎü¨ ÏΩúÎ∞± Ï†ÑÏÜ°
            try {
                callbackProducerService.sendErrorCallback(diaryId, 
                    "Î∂ÑÏÑù Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: " + e.getMessage(), 
                    "ANALYSIS_SERVICE");
            } catch (Exception callbackError) {
                log.error("ÏóêÎü¨ ÏΩúÎ∞± Ï†ÑÏÜ° Ïã§Ìå®: diaryId={}", diaryId, callbackError);
            }
            
            throw e;
        } finally {
            // Ï≤òÎ¶¨ ÏôÑÎ£å ÌõÑ ÏùºÏ†ï ÏãúÍ∞Ñ ÌõÑ ÏÉÅÌÉú Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ ÎàÑÏàò Î∞©ÏßÄ)
            new Thread(() -> {
                try {
                    Thread.sleep(300000); // 5Î∂Ñ ÌõÑ Ï†ïÎ¶¨
                    processedCallbacks.remove(diaryId);
                    log.debug("üßπ Ï≤òÎ¶¨ ÏôÑÎ£å ÏÉÅÌÉú Ï†ïÎ¶¨: diaryId={}", diaryId);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }).start();
        }
    }
}
